import React, { useEffect, useState } from "react";
import Header from "../components/Header";
import { gradingScoreApi } from "../api/client/api";
import * as XLSX from "xlsx";
import { Button, Spin, Table, Card, Select, Upload, Typography } from "antd";
import { UploadOutlined, FileExcelOutlined } from "@ant-design/icons";
import toast from "react-hot-toast";

const { Option } = Select;
const { Title, Paragraph } = Typography;

const HomePage = () => {
  const [selectedSubject, setSelectedSubject] = useState("");
  const [file, setFile] = useState(null);
  const [sheetData, setSheetData] = useState([]);
  const [columns, setColumns] = useState([]);
  const [loading, setLoading] = useState(false);

  const subjects = [
    { val: 1, name: "B√†i t·∫≠p H√† N·ªôi h·ªçc", code: "Ha_Noi_Hoc" },
    { val: 2, name: "B√†i t·∫≠p L·ªãch s·ª≠ vƒÉn minh th·∫ø gi·ªõi 1", code: "Lich_Su_Van_Minh_1" },
    { val: 3, name: "B√†i t·∫≠p L·ªãch s·ª≠ vƒÉn minh th·∫ø gi·ªõi 2", code: "Lich_Su_Van_Minh_2" },
    { val: 4, name: "L·ªõp VƒÉn b·∫£n ti·∫øng Vi·ªát", code: "Lop_Van_Ban_Tieng_Viet" },
  ];

  const handleFileChange = (info) => {
    if (info.fileList && info.fileList.length > 0) {
      const lastFile = info.fileList[info.fileList.length - 1].originFileObj;
      setFile(lastFile);
    } else {
      setFile(null);
    }
  };

  const handleUpload = async () => {
    if (!file || !selectedSubject) {
      toast.error("Vui l√≤ng ch·ªçn c·∫£ m√¥n h·ªçc v√† file.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("subject", selectedSubject);

    const reader = new FileReader();
    reader.onload = async (e) => {
      const data = e.target.result;
      const workbook = XLSX.read(data, { type: "binary" });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });
      const filteredData = jsonData.filter((row) =>
          row.some((cell) => cell !== null && cell !== undefined && cell !== "")
      );

      setSheetData(filteredData);
      setLoading(true);

      gradingScoreApi(formData)
          .then((res) => {
            if (res?.results?.length > 0) {
              const updatedData = filteredData.map((row, index) => {
                let newItem = res.results.find(
                    (item) => item.id.toString() === row[4]?.toString()
                );
                if (index === 0) return [...row, "Nh·∫≠n x√©t"];
                if (newItem) {
                  let review = `
                  <div style="font-family: Arial, sans-serif; line-height: 1.6; padding: 12px; border: 1px solid #e8e8e8; border-radius: 8px; background-color: #f9f9f9; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                    <p style="font-weight: bold; margin-bottom: 12px; color: #333;">Nh·∫≠n x√©t b√†i lu·∫≠n</p>
                    <p style="font-weight: bold; color: #555;">1. N·ªôi dung</p>
                    <p style="margin-bottom: 4px;">${newItem.review["N·ªôi dung"]["Nh·∫≠n x√©t"]}.</p>
                    <p style="margin-bottom: 12px;">ƒê√°nh gi√°: <span style="font-weight: bold; color: #1890ff;">${newItem.review["N·ªôi dung"]["ƒêi·ªÉm"]} ƒëi·ªÉm</span></p>
                    <p style="font-weight: bold; color: #555;">2. Phong c√°ch</p>
                    <p style="margin-bottom: 4px;">${newItem.review["Phong c√°ch"]["Nh·∫≠n x√©t"]}.</p>
                    <p style="margin-bottom: 12px;">ƒê√°nh gi√°: <span style="font-weight: bold; color: #1890ff;">${newItem.review["Phong c√°ch"]["ƒêi·ªÉm"]} ƒëi·ªÉm</span></p>
                    <p style="font-weight: bold; color: #555;">3. H√¨nh th·ª©c</p>
                    <p style="margin-bottom: 4px;">${newItem.review["H√¨nh th·ª©c"]["Nh·∫≠n x√©t"]}.</p>
                    <p style="margin-bottom: 12px;">ƒê√°nh gi√°: <span style="font-weight: bold; color: #1890ff;">${newItem.review["H√¨nh th·ª©c"]["ƒêi·ªÉm"]} ƒëi·ªÉm</span></p>
                    <p style="font-weight: bold; color: #555;">4. S√°ng t·∫°o</p>
                    <p style="margin-bottom: 4px;">${newItem.review["S√°ng t·∫°o"]["Nh·∫≠n x√©t"]}.</p>
                    <p style="margin-bottom: 12px;">ƒê√°nh gi√°: <span style="font-weight: bold; color: #1890ff;">${newItem.review["S√°ng t·∫°o"]["ƒêi·ªÉm"]} ƒëi·ªÉm</span></p>
                    <p style="font-weight: bold; color: #555; margin-top: 8px;">T·ªïng ƒëi·ªÉm: <span style="color: #52c41a;">${newItem.review["T·ªïng ƒëi·ªÉm"]["ƒêi·ªÉm"]} ƒëi·ªÉm</span></p>
                    <p style="font-weight: bold; color: #555; margin-top: 12px;">Nh·∫≠n x√©t chung:</p>
                    <p>${newItem.review["Nh·∫≠n x√©t chung"]}</p>
                  </div>
                `;
                  return [...row, review];
                }
                return [...row, ""];
              });
              setSheetData(updatedData);
            } else {
              console.error("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√∫ng", res);
            }
          })
          .catch((error) => {
            console.error(error);
            toast.error("C√≥ l·ªói x·∫£y ra khi g·ªçi API");
          })
          .finally(() => {
            setLoading(false);
          });
    };
    reader.readAsBinaryString(file);
  };

  const removeHTMLTags = (str) => str.replace(/<\/?[^>]+(>|$)/g, "");

  useEffect(() => {
    if (sheetData.length > 0) {
      const columnWidths = [160, 220, 180, 200, 120, 100, 500, 700]; // Adjusted widths for better content display: wider for "C√¢u tr·∫£ l·ªùi" (index 6) and "Nh·∫≠n x√©t" (index 7)
      const dataColumns = sheetData[0].map((header, index) => ({
        title: header,
        dataIndex: index.toString(),
        key: index.toString(),
        width: columnWidths[index],
        align: "left",
        ellipsis: { showTitle: false },
        render: (text) => {
          if (index === sheetData[0].length - 1) { // "Nh·∫≠n x√©t" column
            return <div dangerouslySetInnerHTML={{ __html: text }} />;
          } else if (index === sheetData[0].length - 2) { // "C√¢u tr·∫£ l·ªùi" column
            return <div style={{ whiteSpace: "pre-wrap", wordBreak: "break-word", hyphens: "auto" }}>{text}</div>;
          }
          return text;
        },
      }));
      setColumns(dataColumns);
    }
  }, [sheetData]);

  const data = sheetData.slice(1).map((row, index) => {
    const rowData = {};
    row.forEach((cell, i) => {
      rowData[i.toString()] = cell;
    });
    return { key: index, ...rowData };
  });

  const handleExport = () => {
    const newData = data.map((item) => ({
      "D·∫•u th·ªùi gian": item["0"],
      "ƒê·ªãa ch·ªâ email": item["1"],
      "H·ªç v√† t√™n sinh vi√™n": item["2"],
      [subjects.find((i) => i.val == selectedSubject)?.name || "M√¥n h·ªçc"]: item["3"],
      "M√£ s·ªë sinh vi√™n": item["4"],
      "S·ªë th·ª© t·ª±": item["5"],
      "C√¢u tr·∫£ l·ªùi": item["6"],
      "Nh·∫≠n x√©t": removeHTMLTags(item["7"] || ""),
    }));

    const ws = XLSX.utils.json_to_sheet(newData, { raw: true });
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Sheet1");
    XLSX.writeFile(
        wb,
        `cham_diem_${subjects.find((i) => i.val == selectedSubject)?.name || "MonHoc"}.xlsx`
    );
  };

  return (
      <>
        {loading && (
            <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
              <Card className="p-8 text-center shadow-2xl rounded-xl">
                <Spin size="large" />
                <Paragraph className="text-lg font-semibold mt-4">
                  ƒêang x·ª≠ l√Ω, vui l√≤ng ch·ªù...
                </Paragraph>
              </Card>
            </div>
        )}

        <Header />
        <div className="max-w-7xl mx-auto px-6 py-8">
          <Card className="shadow-xl rounded-2xl p-8 mb-8 bg-gradient-to-r from-blue-50 to-indigo-50">
            <Title level={2} className="text-center mb-4 text-indigo-700">
              C√¥ng c·ª• Ch·∫•m ƒêi·ªÉm T·ª± ƒê·ªông T·ª´ File Excel
            </Title>
            <Paragraph className="text-center mb-6 text-gray-600">
              Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c√¥ng c·ª• ch·∫•m ƒëi·ªÉm t·ª± ƒë·ªông. H√£y t·∫£i l√™n file Excel v√† ch·ªçn m√¥n h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu quy tr√¨nh ch·∫•m ƒëi·ªÉm m·ªôt c√°ch hi·ªáu qu·∫£.
            </Paragraph>

            <div className="flex flex-col md:flex-row items-center justify-center gap-6">
              <Upload
                  accept=".xlsx,.xls"
                  beforeUpload={() => false}
                  onChange={handleFileChange}
                  showUploadList={{ showRemoveIcon: true }}
                  className="w-full md:w-auto"
              >
                <Button icon={<UploadOutlined />} type="primary" size="large">
                  Ch·ªçn File Excel
                </Button>
              </Upload>

              <Select
                  placeholder="Ch·ªçn m√¥n h·ªçc"
                  value={selectedSubject}
                  onChange={(value) => setSelectedSubject(value)}
                  size="large"
                  className="w-full md:w-64"
              >
                {subjects.map((s) => (
                    <Option key={s.val} value={s.val}>
                      {s.name}
                    </Option>
                ))}
              </Select>

              <Button
                  type="primary"
                  size="large"
                  className="bg-indigo-600 hover:bg-indigo-700 w-full md:w-auto"
                  onClick={handleUpload}
                  disabled={loading}
              >
                T·∫£i L√™n & Ch·∫•m ƒêi·ªÉm
              </Button>
            </div>

            {file && (
                <Paragraph className="text-gray-500 mt-4 text-center">
                  üìé File ƒë√£ ch·ªçn: {file.name}
                </Paragraph>
            )}
          </Card>

          {data.length > 0 && (
              <Card className="shadow-xl rounded-2xl p-6 bg-white">
                <div className="flex justify-between items-center mb-6">
                  <Title level={4} className="font-semibold text-gray-800">
                    K·∫øt Qu·∫£ Ch·∫•m ƒêi·ªÉm
                  </Title>
                  <Button
                      icon={<FileExcelOutlined />}
                      onClick={handleExport}
                      className="bg-green-600 hover:bg-green-700 text-white"
                      size="large"
                  >
                    Xu·∫•t File Excel
                  </Button>
                </div>
                <Table
                    columns={columns}
                    dataSource={data}
                    pagination={{ pageSize: 10, showSizeChanger: true }}
                    scroll={{ x: 1500, y: 500 }}
                    bordered
                    rowClassName={(record, index) => (index % 2 === 0 ? "bg-gray-50" : "")}
                    className="rounded-lg overflow-hidden shadow-sm"
                />
              </Card>
          )}
        </div>
      </>
  );
};

export default HomePage;